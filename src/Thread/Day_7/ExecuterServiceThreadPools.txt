-- ExecutorService, Callable, Future, and Thread Pools

- Modern concurrency tools for managing threads efficiently :
- Executor service
- Callable<V> vs Runnable
- Future<V>
- Thread pools (Executors.newFixedThreadPool() etc.


* Issue with new Thread()...
    new Thread(() -> {
        // work
    }).start();
- Works for simpler tasks
- Not scalable for large applications
- No control over thread reuse, return values, cancellation etc.

* Modern solution : Executor service ( A powerful thread pool manager than help you with )
1. Submit tasks
2. Control number of threads
3. Shut down clearly
4. Get return values (Future)


--- Technical role :
1. Executor service -

ExecutorService executorServ = Executors.newFixedThreadPools(3);

i.  Creates a Thread pool with 3 threads.
ii. Automatically manages thread reuse.

2. Runnable (no return) -

Runnable task = () -> System.out.println("Running tasks.....");
executorServ.submit(task);

3. Callable<V> (returns value) -

Callable<String> task = () -> {
    Thread.sleep(1000);
    return "Task results...";
}
Future<String> future = executorServ.submit(task);
System.out.println("Future result: " + future.get()); // waits

4. Shutting down Executor -

executorServ.shutdown();  // graceful shutdown

i. You should always shut down the executor to release resource